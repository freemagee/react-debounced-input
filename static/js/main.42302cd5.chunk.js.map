{"version":3,"sources":["DelayedInput.js","SearchResults.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["StyledInput","styled","input","DelayedInput","type","initialValue","inputDelay","setInput","useState","value","setValue","useEffect","timer","setTimeout","clearTimeout","theValue","onChange","event","target","placeholder","ResultsTitle","p","ResultsContainer","ul","ResultItem","li","Link","a","SearchResults","searchTerm","results","setResults","parsedSearchTerm","trim","fetch","then","response","json","Object","keys","includes","Error","RelatedTopics","catch","error","console","length","map","result","i","key","Text","href","FirstURL","FormContainer","div","Form","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"umBAWA,IAAMA,EAAcC,IAAOC,MAAV,KAkDFC,MA/Bf,YAKI,IAAD,IAJDC,YAIC,MAJM,OAIN,MAHDC,oBAGC,MAHc,GAGd,MAFDC,kBAEC,MAFY,IAEZ,EADDC,EACC,EADDA,SACC,EACyBC,mBAASH,GADlC,mBACMI,EADN,KACaC,EADb,KAGDC,qBAAU,WACR,IAAMC,EAAQC,YAAW,WACvBN,EAASE,KACRH,GACH,OAAO,kBAAMQ,aAAaF,MACzB,CAACH,EAAOH,EAAYC,IAMvB,IAAMQ,EAAWN,EAEjB,OACE,kBAACT,EAAD,CACEI,KAAMA,EACNK,MAAOM,EACPC,SAVJ,SAAsBC,GACpBP,EAASO,EAAMC,OAAOT,QAUpBU,YAAY,uB,4rBCrDlB,IAAMC,EAAenB,IAAOoB,EAAV,KAKZC,EAAmBrB,IAAOsB,GAAV,KAMhBC,EAAavB,IAAOwB,GAAV,KAIVC,EAAOzB,IAAO0B,EAAV,KAiEKC,MApDf,YAA6C,IAAD,IAAnBC,kBAAmB,MAAN,GAAM,IACZrB,mBAAS,IADG,mBACnCsB,EADmC,KAC1BC,EAD0B,KA2B1C,OAzBApB,qBAAU,WAKR,IAAMqB,EAAmCH,EAH3BI,OAKW,KAArBD,EACFE,MAAM,iCAAD,OAAkCF,EAAlC,iBACFG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GACJ,IAAIC,OAAOC,KAAKF,GAAMG,SAAS,iBAG7B,MAAM,IAAIC,MAAM,+BAFhBV,EAAWM,EAAKK,kBAKnBC,OAAM,SAAAC,GACLC,QAAQD,MAAM,SAAUA,MAG5Bb,EAAW,MAEZ,CAACF,EAAYE,IAGd,oCACE,kBAACX,EAAD,2BACsB,IACpB,4BAAoB,KAAfS,EAAoBA,EAAa,4BAExC,kBAACP,EAAD,KACGQ,EAAQgB,OAAS,GAChBhB,EAAQiB,KAAI,SAACC,EAAQC,GACnB,OAAIX,OAAOC,KAAKS,GAAQR,SAAS,QAE7B,kBAAChB,EAAD,CAAY0B,IAAKD,GACdD,EAAOG,KADV,IACgB,kBAACzB,EAAD,CAAM0B,KAAMJ,EAAOK,UAAnB,SAKb,QAES,IAAnBvB,EAAQgB,QAAgB,kBAACtB,EAAD,6B,iKCxEjC,IAAM8B,EAAgBrD,IAAOsD,IAAV,KAuBJC,MAhBf,WACE,IADc,EAEYhD,mBADL,SADP,mBAEPN,EAFO,KAEAK,EAFA,KAGd,OACE,kBAAC+C,EAAD,KACE,kBAAC,EAAD,CACElD,KAAK,OACLC,aANe,QAOfC,WAAY,IACZC,SAAUA,IAEZ,kBAAC,EAAD,CAAesB,WAAY3B,MCZlBuD,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEd7B,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM6B,c","file":"static/js/main.42302cd5.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nDelayedInput.propTypes = {\r\n  type: PropTypes.string,\r\n  initialValue: PropTypes.string,\r\n  inputDelay: PropTypes.number,\r\n  setInput: PropTypes.func.isRequired\r\n};\r\n\r\nconst StyledInput = styled.input`\r\n  width: 100%;\r\n  padding: 0.5rem 0.75rem;\r\n  font-size: 1.3rem;\r\n  border-radius: 4px;\r\n  border: 2px solid #dadada;\r\n  box-sizing: border-box;\r\n  color: #444;\r\n\r\n  &:focus {\r\n    outline: none;\r\n    border: 2px solid #444;\r\n  }\r\n\r\n  &::placeholder {\r\n    color: #ccc;\r\n  }\r\n`;\r\n\r\nfunction DelayedInput({\r\n  type = \"text\",\r\n  initialValue = \"\",\r\n  inputDelay = 300,\r\n  setInput\r\n}) {\r\n  const [value, setValue] = useState(initialValue);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      setInput(value);\r\n    }, inputDelay);\r\n    return () => clearTimeout(timer);\r\n  }, [value, inputDelay, setInput]);\r\n\r\n  function handleChange(event) {\r\n    setValue(event.target.value);\r\n  }\r\n\r\n  const theValue = value;\r\n\r\n  return (\r\n    <StyledInput\r\n      type={type}\r\n      value={theValue}\r\n      onChange={handleChange}\r\n      placeholder=\"Enter search term\"\r\n    />\r\n  );\r\n}\r\n\r\nexport default DelayedInput;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst ResultsTitle = styled.p`\r\n  margin: 1.2rem 0;\r\n  font-size: 1.2rem;\r\n  font-family: Ubuntu, sans-serif;\r\n`;\r\nconst ResultsContainer = styled.ul`\r\n  margin: 0;\r\n  padding: 0 0 0 1rem;\r\n  font-size: 1rem;\r\n  font-family: Ubuntu, sans-serif;\r\n`;\r\nconst ResultItem = styled.li`\r\n  padding-bottom: 0.2rem;\r\n  line-height: 1.4;\r\n`;\r\nconst Link = styled.a`\r\n  display: inline-block;\r\n  padding: 0 0.5rem;\r\n  background-color: #22a7f0;\r\n  color: #fff;\r\n  text-decoration: none;\r\n  border-radius: 4px;\r\n\r\n  &:hover {\r\n    background-color: #2574a9;\r\n  }\r\n`;\r\n\r\nfunction SearchResults({ searchTerm = \"\" }) {\r\n  const [results, setResults] = useState([]);\r\n  useEffect(() => {\r\n    function parseSearchTerm(term) {\r\n      return term.trim();\r\n    }\r\n\r\n    const parsedSearchTerm = parseSearchTerm(searchTerm);\r\n\r\n    if (parsedSearchTerm !== \"\") {\r\n      fetch(`https://api.duckduckgo.com/?q=${parsedSearchTerm}&format=json`)\r\n        .then(response => response.json())\r\n        .then(json => {\r\n          if (Object.keys(json).includes(\"RelatedTopics\")) {\r\n            setResults(json.RelatedTopics);\r\n          } else {\r\n            throw new Error(\"No related topics available\");\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.error(\"Error:\", error);\r\n        });\r\n    } else {\r\n      setResults([]);\r\n    }\r\n  }, [searchTerm, setResults]);\r\n\r\n  return (\r\n    <>\r\n      <ResultsTitle>\r\n        Related topics for:{\" \"}\r\n        <em>{searchTerm !== \"\" ? searchTerm : \"No search term provided\"}</em>\r\n      </ResultsTitle>\r\n      <ResultsContainer>\r\n        {results.length > 0 &&\r\n          results.map((result, i) => {\r\n            if (Object.keys(result).includes(\"Text\")) {\r\n              return (\r\n                <ResultItem key={i}>\r\n                  {result.Text} <Link href={result.FirstURL}>Link</Link>\r\n                </ResultItem>\r\n              );\r\n            }\r\n\r\n            return null;\r\n          })}\r\n        {results.length === 0 && <ResultItem>No related topics</ResultItem>}\r\n      </ResultsContainer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SearchResults;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport DelayedInput from \"./DelayedInput\";\r\nimport SearchResults from \"./SearchResults\";\r\n\r\nconst FormContainer = styled.div`\r\n  max-width: 560px;\r\n  margin: 0 auto;\r\n  padding: 2rem 1rem;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nfunction Form() {\r\n  const initialInput = \"Llama\";\r\n  const [input, setInput] = useState(initialInput);\r\n  return (\r\n    <FormContainer>\r\n      <DelayedInput\r\n        type=\"text\"\r\n        initialValue={initialInput}\r\n        inputDelay={500}\r\n        setInput={setInput}\r\n      />\r\n      <SearchResults searchTerm={input} />\r\n    </FormContainer>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\nimport Form from \"./Form\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}